{"version":3,"sources":["types/button.types.ts","components/Button/styles.ts","components/Button/Button.tsx","utils/helpers.ts","types/gameModes.types.ts","hooks/useQueryParams.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","components/Board/styles.ts","components/Board/Board.tsx","components/TicTacToe/styles.ts","components/TicTacToe/TicTacToe.tsx","components/GameModal/styles.ts","components/GameModal/GameModal.tsx","components/TurnNavigator/styles.ts","components/TurnNavigator/TurnNavigator.tsx","pages/TicTacToeVsAI/styles.ts","pages/TicTacToeVsAI/TicTacToeVsAI.tsx"],"names":["ButtonTypes","btnStyles","css","margin","width","theme","fontSizes","XS","colors","whiteColor","transparentBlackColor","blackColor","device","tabletBreakpoint","S","StyledBtn","styled","button","StyledLink","Link","Button","children","typeOf","onClick","path","type","BUTTON","to","calculateWinner","cells","lines","i","length","a","b","c","clickHandler","index","winner","gameMode","xIsNext","x0","GameMode","vsAi","cellsCopy","useQuery","URLSearchParams","useLocation","search","Cell","value","Board","div","map","cell","BoardBox","O","h2","XXL","h3","ExtraLarge","Xor0","transparentGrayColor","ButtonsBox","mobileBreakpoint","TicTacToe","resetGameHandler","componentLoading","useTicTacToe","ticTacToeState","loading","Loader","LINK","BackDrop","ModalWrapper","Header","GameModal","modalHandler","firstGameModeHeader","vsAIModeHeader","Info","InfoText","X","TurnNavigator","movesLeft","Container","DescriptionBox","DescTitle","Description","p","TicTacToeVsAI","useState","Array","fill","setCells","setXIsNext","setMovesLeft","modalVisibility","setModalVisibility","currentUser","useAuth","ticTacToeDispatch","userData","query","get","moveHandler","prevState","updateUserData","updatedUserData","gamesPlayed","lostGames","wonGames","TicTacToeActionType","LOADING","payload","setUserData","email","UPDATE_USER_DATA","alert","message","show","useEffect","aiMoveTimeout","setTimeout","shuffleUnique","randomNumber","Math","floor","random","aiMove","clearTimeout"],"mappings":"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","file":"static/js/6.35c6bac5.chunk.js","sourcesContent":["export enum ButtonTypes {\r\n    BUTTON = 'BUTTON',\r\n    LINK = 'LINK',\r\n}\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const btnStyles = css<ButtonsProps>`\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    height: 32px;\r\n    padding: 5px 15px;\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 7px 16px;\r\n        height: 37px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\nexport const StyledBtn = styled.button`\r\n    ${btnStyles}\r\n    padding: 7px 15px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 8px 16px;\r\n    }\r\n`;\r\nexport const StyledLink = styled(Link)`\r\n    ${btnStyles}\r\n`;\r\n","import React from 'react';\r\nimport { ButtonTypes } from 'src/types/button.types';\r\nimport { StyledBtn, StyledLink } from './styles';\r\n\r\ninterface ButtonProps {\r\n    typeOf: ButtonTypes;\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    path?: string;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n    children,\r\n    typeOf,\r\n    width,\r\n    margin,\r\n    onClick,\r\n    path,\r\n    type,\r\n}) => (\r\n    <>\r\n        {typeOf === ButtonTypes.BUTTON ? (\r\n            <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n                {children}\r\n            </StyledBtn>\r\n        ) : (\r\n            <StyledLink margin={margin} width={width} to={path!}>\r\n                {children}\r\n            </StyledLink>\r\n        )}\r\n    </>\r\n);\r\n\r\nexport default Button;\r\n","import { GameMode } from 'src/types/gameModes.types';\r\n\r\nexport const calculateWinner = (cells: string[]) => {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n            return cells[a];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const clickHandler = (\r\n    index: number,\r\n    winner: any,\r\n    cells: string[],\r\n    gameMode: string,\r\n    xIsNext: boolean,\r\n    x0: string\r\n) => {\r\n    if (winner || cells![index] || (!xIsNext && gameMode === GameMode.vsAi)) return;\r\n\r\n    const cellsCopy = [...cells!];\r\n\r\n    cellsCopy[index] = x0;\r\n    return cellsCopy;\r\n};\r\n","export enum GameMode {\r\n    '1vs1' = '1vs1',\r\n    vsAi = 'vsAI',\r\n}\r\n","import { useLocation } from 'react-router';\r\n\r\nexport const useQuery = () => new URLSearchParams(useLocation().search);\r\n","import styled from 'styled-components';\r\n\r\ninterface CellProps {\r\n    value?: string;\r\n}\r\n\r\nexport const Cell = styled.button<CellProps>`\r\n    width: calc(100% + 1px);\r\n    height: calc(100% + 1px);\r\n    background: #333;\r\n    border: none;\r\n    font-size: 50px;\r\n    color: ${({ value }) => (value === 'X' ? 'red' : 'green')};\r\n    outline: none;\r\n    cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\ninterface CellProps {\r\n    value: string;\r\n    onClick: () => void;\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = ({ value, onClick }) => (\r\n    <S.Cell value={value} onClick={onClick}>\r\n        {value}\r\n    </S.Cell>\r\n);\r\n\r\nexport default Cell;\r\n","import { device } from 'src/utils/constants';\r\nimport styled from 'styled-components';\r\n\r\nexport const Board = styled.div`\r\n    display: grid;\r\n    grid-template: repeat(3, 1fr) / repeat(3, 1fr);\r\n    gap: 8px;\r\n    background: ${({ theme }) => theme.colors.whiteColor};\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 350px;\r\n    max-height: 350px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        max-width: 450px;\r\n        max-height: 450px;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport Cell from 'src/components/Cell/Cell';\r\nimport * as S from './styles';\r\n\r\ninterface BoardProps {\r\n    cells: string[];\r\n    onClick: (index: number) => void;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({ cells, onClick }) => {\r\n    return (\r\n        <S.Board>\r\n            {cells.map((cell: string, index: number) => (\r\n                <Cell key={index} value={cell} onClick={() => onClick(index)} />\r\n            ))}\r\n        </S.Board>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled from 'styled-components';\r\n\r\ninterface Xor0Props {\r\n    Xor0: string;\r\n}\r\n\r\nexport const BoardBox = styled.div`\r\n    margin-top: 40px;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 350px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        margin-top: 60px;\r\n        height: 450px;\r\n    }\r\n`;\r\nexport const Info = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\nexport const InfoText = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    text-transform: uppercase;\r\n`;\r\nexport const O = styled.h3<Xor0Props>`\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? theme.colors.transparentGrayColor : 'green')};\r\n`;\r\nexport const X = styled(O)<Xor0Props>`\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? 'red' : theme.colors.transparentGrayColor)};\r\n`;\r\nexport const ButtonsBox = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    bottom: -60px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n\r\n    @media ${device.mobileBreakpoint} {\r\n        bottom: -110px;\r\n    }\r\n`;\r\n","import { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport { ButtonTypes } from 'src/types/button.types';\r\nimport Board from '../Board/Board';\r\nimport Button from '../Button/Button';\r\nimport Loader from '../Loader/Loader';\r\nimport * as S from './styles';\r\n\r\ninterface TicTacToeProps {\r\n    cells: string[];\r\n    clickHandler: (index: number) => void;\r\n    resetGameHandler: () => void;\r\n}\r\n\r\nconst TicTacToe: React.FC<TicTacToeProps> = ({ cells, clickHandler, resetGameHandler }) => {\r\n    const {\r\n        ticTacToeState: {\r\n            loading: { componentLoading },\r\n        },\r\n    } = useTicTacToe();\r\n    return (\r\n        <>\r\n            <S.BoardBox>\r\n                <Board cells={cells!} onClick={clickHandler}></Board>\r\n                <S.ButtonsBox>\r\n                    {componentLoading ? (\r\n                        <Loader />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                margin=\"0 10px 0 0\"\r\n                                width=\"190px\"\r\n                                typeOf={ButtonTypes.LINK}\r\n                                path=\"/\">\r\n                                back to menu\r\n                            </Button>\r\n                            <Button\r\n                                onClick={resetGameHandler}\r\n                                margin=\"0 0 0 10px\"\r\n                                width=\"max-content\"\r\n                                typeOf={ButtonTypes.BUTTON}>\r\n                                restart\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </S.ButtonsBox>\r\n            </S.BoardBox>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicTacToe;\r\n","import styled from 'styled-components';\r\n\r\nexport const BackDrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n`;\r\nexport const ModalWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 40%;\r\n    left: 50%;\r\n    width: 100%;\r\n    transform: translate(-50%);\r\n`;\r\nexport const Header = styled.h2`\r\n    font-size: 40px;\r\n    text-transform: uppercase;\r\n`;\r\n","import { ButtonTypes } from 'src/types/button.types';\r\nimport { GameMode } from 'src/types/gameModes.types';\r\nimport Button from '../Button/Button';\r\nimport * as S from './styles';\r\n\r\ninterface GameModalProps {\r\n    winner: string | null;\r\n    gameMode: string;\r\n    modalHandler: (show: boolean) => void;\r\n}\r\n\r\nconst GameModal: React.FC<GameModalProps> = ({ children, winner, gameMode, modalHandler }) => {\r\n    const firstGameModeHeader = <S.Header>{!!winner ? `\"${winner}\" won` : 'draw'}</S.Header>;\r\n    const vsAIModeHeader = <S.Header>{winner === 'X' ? `you won` : 'you lose'}</S.Header>;\r\n\r\n    return (\r\n        <>\r\n            <S.BackDrop onClick={() => modalHandler(false)} />\r\n            <S.ModalWrapper>\r\n                {gameMode === GameMode['1vs1'] ? firstGameModeHeader : vsAIModeHeader}\r\n                {children}\r\n                <Button\r\n                    onClick={() => modalHandler(false)}\r\n                    margin=\"28px 0\"\r\n                    width=\"max-content\"\r\n                    typeOf={ButtonTypes.BUTTON}>\r\n                    close\r\n                </Button>\r\n            </S.ModalWrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GameModal;\r\n","import styled from 'styled-components';\r\n\r\ninterface Xor0Props {\r\n    Xor0: string;\r\n}\r\n\r\nexport const Info = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\nexport const InfoText = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    text-transform: uppercase;\r\n`;\r\nexport const O = styled.h3<Xor0Props>`\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? theme.colors.transparentGrayColor : 'green')};\r\n`;\r\nexport const X = styled(O)<Xor0Props>`\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? 'red' : theme.colors.transparentGrayColor)};\r\n`;\r\n","import * as S from './styles';\r\n\r\ninterface TurnNavigatorProps {\r\n    winner: string | null;\r\n    x0: string;\r\n    movesLeft: number;\r\n}\r\n\r\nconst TurnNavigator: React.FC<TurnNavigatorProps> = ({ winner, x0, movesLeft }) => {\r\n    return (\r\n        <S.Info>\r\n            <S.X Xor0={!!winner ? winner : x0}>X</S.X>\r\n            {!!movesLeft && !winner && <S.InfoText>next move</S.InfoText>}\r\n            <S.O Xor0={!!winner ? winner : x0}>0</S.O>\r\n        </S.Info>\r\n    );\r\n};\r\n\r\nexport default TurnNavigator;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n`;\r\nexport const DescriptionBox = styled.div`\r\n    margin: 10px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\nexport const DescTitle = styled.h3`\r\n    text-transform: uppercase;\r\n`;\r\nexport const Description = styled.p`\r\n    margin-top: 8px;\r\n    text-transform: uppercase;\r\n`;\r\n","import { useEffect, useState } from 'react';\r\nimport { useQuery } from 'src/hooks/useQueryParams';\r\nimport { calculateWinner } from 'src/utils/helpers';\r\nimport { clickHandler } from 'src/utils/helpers';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport TicTacToe from 'src/components/TicTacToe/TicTacToe';\r\nimport GameModal from 'src/components/GameModal/GameModal';\r\nimport TurnNavigator from 'src/components/TurnNavigator/TurnNavigator';\r\nimport { setUserData } from 'src/store/TicTacToe/TicTacToe.services';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport * as S from './styles';\r\n\r\nconst TicTacToeVsAI = () => {\r\n    const [cells, setCells] = useState<string[]>(Array(9).fill(null));\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [movesLeft, setMovesLeft] = useState(9);\r\n    const [modalVisibility, setModalVisibility] = useState(false);\r\n    const { currentUser } = useAuth();\r\n    const {\r\n        ticTacToeDispatch,\r\n        ticTacToeState: { userData },\r\n    } = useTicTacToe();\r\n    const query = useQuery();\r\n\r\n    const winner = calculateWinner(cells);\r\n    const x0 = xIsNext ? 'X' : 'O';\r\n    const gameMode = query.get('name')!;\r\n\r\n    const click = (index: number) => {\r\n        const cellsCopy = clickHandler(index, winner, cells, gameMode!, xIsNext, x0);\r\n        if (!!cellsCopy) moveHandler(cellsCopy!);\r\n    };\r\n\r\n    const aiMove = () => {\r\n        if (!xIsNext && !winner && movesLeft !== 0) {\r\n            const cellsCopy = [...cells!];\r\n            let shuffleUnique = true;\r\n\r\n            while (shuffleUnique) {\r\n                let randomNumber = Math.floor(Math.random() * 9);\r\n\r\n                if (!cells![randomNumber]) {\r\n                    shuffleUnique = false;\r\n                    cellsCopy[randomNumber] = x0;\r\n                }\r\n            }\r\n            moveHandler(cellsCopy);\r\n        }\r\n    };\r\n\r\n    const moveHandler = (cellsCopy: string[]) => {\r\n        setCells([...cellsCopy]);\r\n        setXIsNext(!xIsNext);\r\n        setMovesLeft(prevState => prevState - 1);\r\n    };\r\n\r\n    const resetGameHandler = () => {\r\n        setCells(Array(9).fill(null));\r\n        setXIsNext(true);\r\n        setMovesLeft(9);\r\n    };\r\n\r\n    const updateUserData = async () => {\r\n        const updatedUserData = {\r\n            gamesPlayed: +userData.gamesPlayed + 1,\r\n            lostGames: +userData.lostGames,\r\n            wonGames: +userData.wonGames,\r\n        };\r\n\r\n        if (winner === 'O') updatedUserData.lostGames = +userData.lostGames + 1;\r\n        if (winner === 'X') updatedUserData.wonGames = +userData.wonGames + 1;\r\n\r\n        if (!!winner)\r\n            try {\r\n                ticTacToeDispatch({\r\n                    type: TicTacToeActionType.LOADING,\r\n                    payload: { componentLoading: true },\r\n                });\r\n\r\n                await setUserData(currentUser.email, updatedUserData);\r\n                ticTacToeDispatch({\r\n                    type: TicTacToeActionType.UPDATE_USER_DATA,\r\n                    payload: updatedUserData,\r\n                });\r\n                modalHandler(true);\r\n            } catch (err: any) {\r\n                alert(err.message);\r\n            } finally {\r\n                ticTacToeDispatch({\r\n                    type: TicTacToeActionType.LOADING,\r\n                    payload: { componentLoading: false },\r\n                });\r\n            }\r\n    };\r\n\r\n    const modalHandler = (show: boolean) => setModalVisibility(show);\r\n\r\n    useEffect(() => {\r\n        if (!!winner || !movesLeft) updateUserData();\r\n    }, [movesLeft]);\r\n\r\n    useEffect(() => {\r\n        const aiMoveTimeout = setTimeout(() => aiMove(), 500);\r\n\r\n        return () => clearTimeout(aiMoveTimeout);\r\n    }, [movesLeft]);\r\n\r\n    return (\r\n        <S.Container>\r\n            <TurnNavigator winner={winner} x0={x0} movesLeft={movesLeft} />\r\n            <TicTacToe cells={cells} clickHandler={click} resetGameHandler={resetGameHandler} />\r\n            {modalVisibility && (\r\n                <GameModal winner={winner} gameMode={gameMode} modalHandler={modalHandler}>\r\n                    <S.DescriptionBox>\r\n                        <S.DescTitle>games played: {userData.gamesPlayed}</S.DescTitle>\r\n                        <S.Description>lost games: {userData.lostGames}</S.Description>\r\n                        <S.Description>won games: {userData.wonGames}</S.Description>\r\n                    </S.DescriptionBox>\r\n                </GameModal>\r\n            )}\r\n        </S.Container>\r\n    );\r\n};\r\n\r\nexport default TicTacToeVsAI;\r\n"],"sourceRoot":""}