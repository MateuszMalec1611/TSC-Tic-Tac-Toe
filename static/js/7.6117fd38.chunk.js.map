{"version":3,"sources":["types/button.types.ts","components/Button/styles.ts","components/Button/Button.tsx","store/Auth/Auth.types.ts","components/Card/styles.ts","components/Title/styles.ts","components/Title/Title.tsx","components/Card/Card.tsx","hooks/useAuthAction.ts","pages/Menu/styles.ts","pages/Menu/Menu.tsx"],"names":["ButtonTypes","btnStyles","css","margin","width","theme","fontSizes","XS","colors","whiteColor","transparentBlackColor","blackColor","device","tabletBreakpoint","S","StyledBtn","styled","button","StyledLink","Link","Button","children","typeOf","onClick","path","type","BUTTON","to","AuthActions","Card","div","lightGrayColor","Title","h2","XXXL","XXXXL","useAuthAction","ticTacToeDispatch","useTicTacToe","useAuth","login","signup","logout","resetPassword","history","useHistory","useAction","action","errorMess","email","password","a","TicTacToeActionType","LOADING","payload","componentLoading","LOGIN","SIGNUP","LOGOUT","RESET_PASSWORD","ERROR","error","errorMessage","push","MenuBox","ButtonsBox","transparentGrayColor","redColor","Menu","logoutHandling","LINK"],"mappings":"iHAAO,IAAKA,EAAZ,kC,SAAYA,K,gBAAAA,E,aAAAA,M,6FCSCC,EAAYC,YAAH,woBACR,qBAAGC,UACJ,qBAAGC,SAGC,qBAAGC,MAAkBC,UAAUC,MACxB,qBAAGF,MAAkBG,OAAOC,cACvC,qBAAGJ,MAAkBG,OAAOE,yBAGV,qBAAGL,MAAkBG,OAAOG,cAU/B,qBAAGN,MAAkBG,OAAOC,aAG3CG,IAAOC,kBAEC,qBAAGR,MAAkBC,UAAUQ,KAGvCC,EAAYC,IAAOC,OAAV,mHAChBhB,EAGOW,IAAOC,kBAIPK,EAAaF,YAAOG,IAAPH,CAAH,oCACjBf,G,QCTSmB,IAxBuB,SAAC,GAQhC,IAPHC,EAOE,EAPFA,SACAC,EAME,EANFA,OACAlB,EAKE,EALFA,MACAD,EAIE,EAJFA,OACAoB,EAGE,EAHFA,QACAC,EAEE,EAFFA,KACAC,EACE,EADFA,KAEA,OACI,mCACKH,IAAWtB,IAAY0B,OACpB,cAACX,EAAD,CAAWQ,QAASA,EAASpB,OAAQA,EAAQC,MAAOA,EAAOqB,KAAMA,EAAjE,SACKJ,IAGL,cAACH,EAAD,CAAYf,OAAQA,EAAQC,MAAOA,EAAOuB,GAAIH,EAA9C,SACKH,Q,gCCtBd,IAAKO,EAAZ,kC,SAAYA,K,cAAAA,E,gBAAAA,E,gBAAAA,E,iCAAAA,M,sFCNCC,E,MAAOb,EAAOc,IAAV,4PAOO,qBAAGzB,MAAkBG,OAAOuB,mB,mECNvCC,EAAQhB,IAAOiB,GAAV,6MAED,qBAAG5B,MAAkBC,UAAU4B,OAKnCtB,IAAOC,kBACC,qBAAGR,MAAkBC,UAAU6B,S,QCNrCH,IAFS,SAAC,GAAD,IAAGX,EAAH,EAAGA,SAAH,OAAkB,cAAC,EAAD,UAAUA,M,gCCHpD,yBAOeQ,IAJQ,SAAC,GAAkB,IAAhBR,EAAe,EAAfA,SACtB,OAAO,cAAC,IAAD,UAASA,M,mGCsDLe,IApDO,WAClB,IAAQC,EAAsBC,cAAtBD,kBACR,EAAiDE,cAAzCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,cACzBC,EAAUC,cAEVC,EAAS,uCAAG,WACdC,EACAC,EACAxB,EACAyB,EACAC,GALc,SAAAC,EAAA,+DAQVd,EAAkB,CACdZ,KAAM2B,IAAoBC,QAC1BC,QAAS,CAAEC,kBAAkB,KAVvB,KAaFR,EAbE,cAcDnB,IAAY4B,MAdX,SAiBD5B,IAAY6B,OAjBX,SAoBD7B,IAAY8B,OApBX,UAuBD9B,IAAY+B,eAvBX,mCAeInB,EAAMS,EAAQC,GAflB,2DAkBIT,EAAOQ,EAAQC,GAlBnB,6DAqBIR,IArBJ,6DAwBIC,EAAcM,GAxBlB,4CA2BVZ,EAAkB,CACdZ,KAAM2B,IAAoBQ,MAC1BN,QAAS,CAAEO,OAAO,EAAOC,aAAc,MAEvCtC,GAAMoB,EAAQmB,KAAR,UAAgBvC,IA/BhB,kDAiCVa,EAAkB,CACdZ,KAAM2B,IAAoBQ,MAC1BN,QAAS,CAAEO,OAAO,EAAMC,aAAcd,KAnChC,yBAsCVX,EAAkB,CACdZ,KAAM2B,IAAoBC,QAC1BC,QAAS,CAAEC,kBAAkB,KAxCvB,6EAAH,8DA4Cf,OAAOT,I,wICrDEkB,EAAUhD,IAAOc,IAAV,0BACPmC,EAAajD,IAAOc,IAAV,0HAOVV,EAASJ,IAAOC,OAAV,8bAIK,qBAAGZ,MAAkBG,OAAO0D,wBAGrB,qBAAG7D,MAAkBG,OAAOG,cAM/B,qBAAGN,MAAkBG,OAAO2D,YAE5B,qBAAG9D,MAAkBG,OAAOC,c,QCoBzC2D,UArCF,WACT,IAAMtB,EAAYV,cAEZiC,EAAc,uCAAG,sBAAAlB,EAAA,sEACbL,EAAUlB,IAAY8B,OAAQ,oBAAqB,SADtC,mFAAH,qDAGpB,OACI,mCACI,cAAC7B,EAAA,EAAD,UACI,eAAC,EAAD,WACI,cAACG,EAAA,EAAD,mBACA,eAAC,EAAD,WACI,cAACZ,EAAA,EAAD,CACIjB,OAAO,aACPC,MAAM,OACNkB,OAAQtB,IAAYsE,KACpB9C,KAAK,4BAJT,oBAOA,cAACJ,EAAA,EAAD,CACIjB,OAAO,aACPC,MAAM,OACNkB,OAAQtB,IAAYsE,KACpB9C,KAAK,4BAJT,mBAOA,cAACJ,EAAA,EAAD,CAAQjB,OAAO,aAAaC,MAAM,OAAOkB,OAAQtB,IAAYsE,KAAM9C,KAAK,WAAxE,qBAGA,cAAC,EAAD,CAAUD,QAAS8C,EAAnB","file":"static/js/7.6117fd38.chunk.js","sourcesContent":["export enum ButtonTypes {\r\n    BUTTON = 'BUTTON',\r\n    LINK = 'LINK',\r\n}\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const btnStyles = css<ButtonsProps>`\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    padding: 5px 15px;\r\n    height: max-content;\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 6px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\nexport const StyledBtn = styled.button`\r\n    ${btnStyles}\r\n    padding: 7px 15px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 8px 16px;\r\n    }\r\n`;\r\nexport const StyledLink = styled(Link)`\r\n    ${btnStyles}\r\n`;\r\n","import React from 'react';\r\nimport { ButtonTypes } from 'src/types/button.types';\r\nimport { StyledBtn, StyledLink } from './styles';\r\n\r\ninterface ButtonProps {\r\n    typeOf: ButtonTypes;\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    path?: string;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n    children,\r\n    typeOf,\r\n    width,\r\n    margin,\r\n    onClick,\r\n    path,\r\n    type,\r\n}) => {\r\n    return (\r\n        <>\r\n            {typeOf === ButtonTypes.BUTTON ? (\r\n                <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n                    {children}\r\n                </StyledBtn>\r\n            ) : (\r\n                <StyledLink margin={margin} width={width} to={path!}>\r\n                    {children}\r\n                </StyledLink>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","export type ProviderValue = {\r\n    currentUser: any;\r\n    signup: (email: string, password: string) => any;\r\n    login: (email: string, password: string) => any;\r\n    logout: () => any;\r\n    resetPassword: (emial: string) => any;\r\n};\r\n\r\nexport enum AuthActions {\r\n    LOGIN = 'LOGIN',\r\n    SIGNUP = 'SIGNUP',\r\n    LOGOUT = 'LOGOUT',\r\n    RESET_PASSWORD = 'RESET_PASSWORD',\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n    padding: 20px;\r\n    margin-top: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: ${({ theme }) => theme.colors.lightGrayColor};\r\n    border-radius: 4px;\r\n    box-shadow: 3px 3px 14px black;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { device } from 'src/utils/constants';\r\n\r\nexport const Title = styled.h2`\r\n    margin: 20px 0;\r\n    font-size: ${({ theme }) => theme.fontSizes.XXXL};\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XXXXL};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Title: React.FC = ({ children }) => <S.Title>{children}</S.Title>;\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Card: React.FC = ({ children }) => {\r\n    return <S.Card>{children}</S.Card>;\r\n};\r\n\r\nexport default Card;\r\n","import { useHistory } from 'react-router';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useAuth } from './useAuth';\r\nimport { useTicTacToe } from './useTicTacToe';\r\n\r\nconst useAuthAction = () => {\r\n    const { ticTacToeDispatch } = useTicTacToe();\r\n    const { login, signup, logout, resetPassword } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const useAction = async (\r\n        action: AuthActions,\r\n        errorMess: string,\r\n        path?: string,\r\n        email?: string,\r\n        password?: string\r\n    ) => {\r\n        try {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: true },\r\n            });\r\n\r\n            switch (action) {\r\n                case AuthActions.LOGIN:\r\n                    await login(email!, password!);\r\n                    break;\r\n                case AuthActions.SIGNUP:\r\n                    await signup(email!, password!);\r\n                    break;\r\n                case AuthActions.LOGOUT:\r\n                    await logout();\r\n                    break;\r\n                case AuthActions.RESET_PASSWORD:\r\n                    await resetPassword(email!);\r\n                    break;\r\n            }\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: false, errorMessage: '' },\r\n            });\r\n            if (path) history.push(`${path}`);\r\n        } catch (err) {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: true, errorMessage: errorMess },\r\n            });\r\n        } finally {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: false },\r\n            });\r\n        }\r\n    };\r\n    return useAction;\r\n};\r\n\r\nexport default useAuthAction;\r\n","import styled from 'styled-components';\r\n\r\nexport const MenuBox = styled.div``;\r\nexport const ButtonsBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 160px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 5px 0;\r\n    margin-top: 26px;\r\n    width: 100%;\r\n    background-color: ${({ theme }) => theme.colors.transparentGrayColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 2px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.redColor};\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n`;\r\n","import Button from 'src/components/Button/Button';\r\nimport Card from 'src/components/Card/Card';\r\nimport Title from 'src/components/Title/Title';\r\nimport useAuthAction from 'src/hooks/useAuthAction';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport { ButtonTypes } from 'src/types/button.types';\r\nimport * as S from './styles';\r\n\r\nconst Menu = () => {\r\n    const useAction = useAuthAction();\r\n\r\n    const logoutHandling = async () =>\r\n        await useAction(AuthActions.LOGOUT, 'Failed to logout!', '/auth');\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <S.MenuBox>\r\n                    <Title>Menu</Title>\r\n                    <S.ButtonsBox>\r\n                        <Button\r\n                            margin=\"26px 0 0 0\"\r\n                            width=\"100%\"\r\n                            typeOf={ButtonTypes.LINK}\r\n                            path=\"/ticTacToe/1vs1?name=1vs1\">\r\n                            1 vs 1\r\n                        </Button>\r\n                        <Button\r\n                            margin=\"26px 0 0 0\"\r\n                            width=\"100%\"\r\n                            typeOf={ButtonTypes.LINK}\r\n                            path=\"/ticTacToe/vsAI?name=vsAI\">\r\n                            vs ai\r\n                        </Button>\r\n                        <Button margin=\"26px 0 0 0\" width=\"100%\" typeOf={ButtonTypes.LINK} path=\"/ranking\">\r\n                            ranking\r\n                        </Button>\r\n                        <S.Button onClick={logoutHandling}>Logout</S.Button>\r\n                    </S.ButtonsBox>\r\n                </S.MenuBox>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n"],"sourceRoot":""}