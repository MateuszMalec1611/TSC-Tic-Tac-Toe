{"version":3,"sources":["hooks/useForm.ts","pages/Auth/styles.ts","pages/Auth/Auth.tsx","components/Card/styles.ts","components/Title/styles.ts","components/Title/Title.tsx","store/Auth/Auth.types.ts","components/Card/Card.tsx","hooks/useAuthAction.ts"],"names":["useForm","isInputValid","useState","value","setValue","isTouched","setIsTouched","isValid","valueHandler","target","isTouchedHanlder","error","FormBox","styled","form","InputBox","div","device","tabletBreakpoint","Label","label","theme","fontSizes","XL","XXL","Input","input","M","colors","fontColor","S","transparentGrayColor","Error","p","block","XS","redColor","ButtonBox","registerType","Text","button","whiteColor","transparentBlackColor","a","StyledLink","Link","LinkBox","loginFormType","Auth","setLoginFormType","useTicTacToe","ticTacToeState","componentLoading","loading","errorMessage","useAction","useAuthAction","emialRegex","test","email","emailHandler","isTouchedEmailHanlder","isValidEmail","emailError","trim","length","password","passwordHandler","isTouchedPasswordHanlder","isValidPassword","passwordError","confirmPassword","confirmPasswordHandler","isTouchedConfirmPasswordHanlder","isValidConfirmPassword","confirmPasswordError","submitHandler","event","preventDefault","checkInputs","AuthActions","LOGIN","SIGNUP","emailErrorInfo","passwordErrorInfo","confirmPasswordErrorInfo","onSubmit","onBlur","onChange","type","margin","width","onClick","prev","role","to","Card","motion","lightGrayColor","Title","h2","ExtraSLarge","ExtraLarge","children","pageProps","variants","pageVariants","transition","pageTransition","ticTacToeDispatch","useAuth","login","signup","logout","resetPassword","history","useHistory","action","errorMess","path","TicTacToeActionType","LOADING","payload","LOGOUT","RESET_PASSWORD","ERROR","push"],"mappings":"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","file":"static/js/4.633d7fb7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const useForm = (isInputValid: (value: string) => boolean) => {\r\n    const [value, setValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueHandler = ({ target }: React.ChangeEvent<HTMLInputElement>) => setValue(target.value);\r\n    const isTouchedHanlder = () => setIsTouched(true);\r\n\r\n    let isValid = isInputValid(value);\r\n    const error = isTouched && !isValid;\r\n\r\n    return {\r\n        value,\r\n        valueHandler,\r\n        isTouchedHanlder,\r\n        error,\r\n        isValid,\r\n    };\r\n};\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\n\r\ninterface ButtonBoxProps {\r\n    registerType: boolean;\r\n}\r\ninterface ErrorProps {\r\n    block?: boolean;\r\n}\r\ninterface LinkBoxProps {\r\n    loginFormType: boolean;\r\n}\r\n\r\nexport const FormBox = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    max-width: 400px;\r\n`;\r\nexport const InputBox = styled.div`\r\n    position: relative;\r\n    margin: 22px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        margin: 24px 0;\r\n    }\r\n`;\r\nexport const Label = styled.label`\r\n    position: absolute;\r\n    bottom: 2px;\r\n    font-size: ${({ theme }) => theme.fontSizes.XL};\r\n    z-index: 0;\r\n    transition: bottom 0.3s, font-size 0.3s;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    }\r\n`;\r\nexport const Input = styled.input`\r\n    padding: 2px 5px;\r\n    background-color: transparent;\r\n    font-size: ${({ theme }) => theme.fontSizes.M};\r\n    color: ${({ theme }) => theme.colors.fontColor};\r\n    border: none;\r\n    border-radius: 0;\r\n    border-bottom: 1px solid white;\r\n    z-index: 1;\r\n    outline: none;\r\n\r\n    &[value]:not([value='']) + label,\r\n    &:focus + label {\r\n        bottom: 26px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n        color: ${({ theme }) => theme.colors.transparentGrayColor};\r\n\r\n        @media ${device.tabletBreakpoint} {\r\n            bottom: 28px;\r\n            ${({ theme }) => theme.fontSizes.M};\r\n        }\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XL};\r\n    }\r\n`;\r\nexport const Error = styled.p<ErrorProps>`\r\n    margin-top: ${({ block }) => (block ? '18px' : 'unset')};\r\n    position: ${({ block }) => (block ? 'relative' : 'absolute')};\r\n    bottom: ${({ block }) => (block ? 'unset' : '-80%')};\r\n    text-align: center;\r\n    width: 100%;\r\n    font-size: ${({ block, theme }) => (block ? theme.fontSizes.M : theme.fontSizes.XS)};\r\n    color: ${({ theme }) => theme.colors.redColor};\r\n`;\r\nexport const ButtonBox = styled.div<ButtonBoxProps>`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: ${({ registerType }) => (registerType ? 'column' : 'row')};\r\n    align-items: ${({ registerType }) => (registerType ? 'center' : 'center')};\r\n    justify-content: ${({ registerType }) => (registerType ? 'unset' : 'space-between')};\r\n`;\r\nexport const Button = styled.button`\r\n    margin-right: 12px;\r\n    padding: 6px 15px;\r\n    height: max-content;\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 4px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 7px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\nexport const Text = styled.a`\r\n    display: block;\r\n    margin-top: 5px;\r\n    padding: 0px 10px;\r\n    font-size: ${({ theme }) => theme.fontSizes.S};\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.M};\r\n    }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    padding: 5px 10px;\r\n    font-size: ${({ theme }) => theme.fontSizes.S};\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.fontColor};\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.M};\r\n    }\r\n`;\r\n\r\nexport const LinkBox = styled.div<LinkBoxProps>`\r\n    display: ${({ loginFormType }) => (loginFormType ? 'flex' : 'block')};\r\n    flex-direction: ${({ loginFormType }) => (loginFormType ? 'column' : 'unset')};\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'src/hooks/useForm';\r\nimport { emialRegex } from 'src/utils/constants';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport useAuthAction from 'src/hooks/useAuthAction';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport Loader from 'src/components/Loader/Loader';\r\nimport AuthTitle from 'src/components/Title/Title';\r\nimport Button from 'src/components/Button/Button';\r\nimport Card from 'src/components/Card/Card';\r\nimport * as S from './styles';\r\n\r\nconst Auth = () => {\r\n    const [loginFormType, setLoginFormType] = useState(true);\r\n    const {\r\n        ticTacToeState: {\r\n            loading: { componentLoading },\r\n            error,\r\n            errorMessage,\r\n        },\r\n    } = useTicTacToe();\r\n    const useAction = useAuthAction();\r\n\r\n    const {\r\n        value: email,\r\n        valueHandler: emailHandler,\r\n        isTouchedHanlder: isTouchedEmailHanlder,\r\n        isValid: isValidEmail,\r\n        error: emailError,\r\n    } = useForm(value => emialRegex.test(value));\r\n    const {\r\n        value: password,\r\n        valueHandler: passwordHandler,\r\n        isTouchedHanlder: isTouchedPasswordHanlder,\r\n        isValid: isValidPassword,\r\n        error: passwordError,\r\n    } = useForm(value => value.trim().length >= 6);\r\n    const {\r\n        value: confirmPassword,\r\n        valueHandler: confirmPasswordHandler,\r\n        isTouchedHanlder: isTouchedConfirmPasswordHanlder,\r\n        isValid: isValidConfirmPassword,\r\n        error: confirmPasswordError,\r\n    } = useForm(value => value === password);\r\n\r\n    const formTypeHandler = () => setLoginFormType(prev => !prev);\r\n\r\n    const submitHandler = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        if (!checkInputs()) return;\r\n\r\n        if (loginFormType)\r\n            await useAction(AuthActions.LOGIN, 'Failed to login', '/', email, password);\r\n        if (!loginFormType)\r\n            await useAction(\r\n                AuthActions.SIGNUP,\r\n                'Failed to create an account',\r\n                '/',\r\n                email,\r\n                password\r\n            );\r\n    };\r\n\r\n    const checkInputs = () => {\r\n        isTouchedEmailHanlder();\r\n        isTouchedPasswordHanlder();\r\n\r\n        if (!loginFormType) {\r\n            isTouchedConfirmPasswordHanlder();\r\n            if (isValidEmail && isValidPassword && isValidConfirmPassword) return true;\r\n        } else if (isValidEmail && isValidPassword) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const emailErrorInfo = emailError && <S.Error>Please enter a valid Email!</S.Error>;\r\n    const passwordErrorInfo = passwordError && (\r\n        <S.Error>Password incorrect (at least 6 characters)</S.Error>\r\n    );\r\n    const confirmPasswordErrorInfo = confirmPasswordError && (\r\n        <S.Error>Passwords do not match</S.Error>\r\n    );\r\n\r\n    return (\r\n        <Card>\r\n            <S.FormBox onSubmit={submitHandler}>\r\n                <AuthTitle>{loginFormType ? 'login' : 'register'}</AuthTitle>\r\n                <S.InputBox>\r\n                    <S.Input\r\n                        onBlur={isTouchedEmailHanlder}\r\n                        onChange={emailHandler}\r\n                        value={email}\r\n                        type=\"email\"\r\n                    />\r\n                    <S.Label>E-mail</S.Label>\r\n                    {emailErrorInfo}\r\n                </S.InputBox>\r\n                <S.InputBox>\r\n                    <S.Input\r\n                        onBlur={isTouchedPasswordHanlder}\r\n                        onChange={passwordHandler}\r\n                        value={password}\r\n                        type=\"password\"\r\n                    />\r\n                    <S.Label>Password</S.Label>\r\n                    {passwordErrorInfo}\r\n                </S.InputBox>\r\n                {!loginFormType && (\r\n                    <S.InputBox>\r\n                        <S.Input\r\n                            onBlur={isTouchedConfirmPasswordHanlder}\r\n                            onChange={confirmPasswordHandler}\r\n                            value={confirmPassword}\r\n                            type=\"password\"\r\n                        />\r\n                        <S.Label>Confirm Password</S.Label>\r\n                        {confirmPasswordErrorInfo}\r\n                    </S.InputBox>\r\n                )}\r\n                {error && <S.Error block>{errorMessage}</S.Error>}\r\n                {componentLoading ? (\r\n                    <Loader />\r\n                ) : (\r\n                    <S.ButtonBox registerType={!loginFormType}>\r\n                        <Button margin=\"0\" type=\"submit\" width=\"max-content\">\r\n                            {loginFormType ? 'login' : 'register'}\r\n                        </Button>\r\n                        <S.LinkBox loginFormType={loginFormType}>\r\n                            <S.Text onClick={formTypeHandler} role=\"button\">\r\n                                {loginFormType\r\n                                    ? 'Create an account'\r\n                                    : 'Login to an existing account'}\r\n                            </S.Text>\r\n                            {loginFormType && (\r\n                                <S.StyledLink to=\"/forgot-password\">Forgot Password?</S.StyledLink>\r\n                            )}\r\n                        </S.LinkBox>\r\n                    </S.ButtonBox>\r\n                )}\r\n            </S.FormBox>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n","import { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\n\r\nexport const Card = styled(motion.div)<any>`\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: ${({ theme }) => theme.colors.lightGrayColor};\r\n    border-radius: 4px;\r\n    box-shadow: 3px 3px 14px black;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { device } from 'src/utils/constants';\r\n\r\nexport const Title = styled.h2`\r\n    margin: 20px 0;\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraSLarge};\r\n    text-align: center;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Title: React.FC = ({ children }) => <S.Title>{children}</S.Title>;\r\n\r\nexport default Title;\r\n","export type ProviderValue = {\r\n    currentUser: any;\r\n    signup: (email: string, password: string) => any;\r\n    login: (email: string, password: string) => any;\r\n    logout: () => any;\r\n    resetPassword: (emial: string) => any;\r\n};\r\n\r\nexport enum AuthActions {\r\n    LOGIN = 'LOGIN',\r\n    SIGNUP = 'SIGNUP',\r\n    LOGOUT = 'LOGOUT',\r\n    RESET_PASSWORD = 'RESET_PASSWORD',\r\n}\r\n","import React from 'react';\r\nimport { pageProps, pageTransition, pageVariants } from 'src/utils/constants';\r\nimport * as S from './styles';\r\n\r\nconst Card: React.FC = ({ children }) => {\r\n    return (\r\n        <S.Card {...pageProps} variants={pageVariants} transition={pageTransition}>\r\n            {children}\r\n        </S.Card>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import { useHistory } from 'react-router';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useAuth } from './useAuth';\r\nimport { useTicTacToe } from './useTicTacToe';\r\n\r\nconst useAuthAction = () => {\r\n    const { ticTacToeDispatch } = useTicTacToe();\r\n    const { login, signup, logout, resetPassword } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const useAction = async (\r\n        action: AuthActions,\r\n        errorMess: string,\r\n        path?: string,\r\n        email?: string,\r\n        password?: string\r\n    ) => {\r\n        try {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: true },\r\n            });\r\n\r\n            switch (action) {\r\n                case AuthActions.LOGIN:\r\n                    await login(email!, password!);\r\n                    break;\r\n                case AuthActions.SIGNUP:\r\n                    await signup(email!, password!);\r\n                    break;\r\n                case AuthActions.LOGOUT:\r\n                    await logout();\r\n                    break;\r\n                case AuthActions.RESET_PASSWORD:\r\n                    await resetPassword(email!);\r\n                    break;\r\n            }\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: false, errorMessage: '' },\r\n            });\r\n            if (path) history.push(`${path}`);\r\n        } catch (err) {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: true, errorMessage: errorMess },\r\n            });\r\n        } finally {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: false },\r\n            });\r\n        }\r\n    };\r\n    return useAction;\r\n};\r\n\r\nexport default useAuthAction;\r\n"],"sourceRoot":""}