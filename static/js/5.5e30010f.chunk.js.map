{"version":3,"sources":["pages/Auth/styles.ts","pages/ResetPassword/styles.ts","pages/ResetPassword/ResetPassword.tsx","components/Button/styles.ts","components/Button/Button.tsx","components/Card/styles.ts","components/Title/styles.ts","components/Title/Title.tsx","store/Auth/Auth.types.ts","hooks/useAuthAction.ts","hooks/useForm.ts"],"names":["FormBox","styled","form","InputBox","div","device","tabletBreakpoint","Label","label","theme","fontSizes","XL","XXL","Input","input","M","colors","fontColor","S","transparentGrayColor","Error","p","block","XS","redColor","ButtonBox","registerType","Text","button","whiteColor","transparentBlackColor","a","StyledLink","Link","LinkBox","loginFormType","Message","greenColor","ResetPassword","useTicTacToe","ticTacToeState","componentLoading","loading","error","errorMessage","useAction","useAuthAction","useState","message","setMessage","useForm","value","emialRegex","test","email","emailHandler","valueHandler","isTouchedEmailHanlder","isTouchedHanlder","isValidEmail","isValid","emailError","submitHandler","event","preventDefault","AuthActions","RESET_PASSWORD","undefined","emailErrorInfo","onSubmit","onBlur","onChange","type","length","Loader","Button","margin","width","to","StyledBtn","blackColor","children","onClick","Card","motion","lightGrayColor","Title","h2","ExtraSLarge","ExtraLarge","ticTacToeDispatch","useAuth","login","signup","logout","resetPassword","history","useHistory","action","errorMess","path","password","TicTacToeActionType","LOADING","payload","LOGIN","SIGNUP","LOGOUT","ERROR","push","isInputValid","setValue","isTouched","setIsTouched","target"],"mappings":"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","file":"static/js/5.5e30010f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\n\r\ninterface ButtonBoxProps {\r\n    registerType: boolean;\r\n}\r\ninterface ErrorProps {\r\n    block?: boolean;\r\n}\r\ninterface LinkBoxProps {\r\n    loginFormType: boolean;\r\n}\r\n\r\nexport const FormBox = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    max-width: 400px;\r\n`;\r\nexport const InputBox = styled.div`\r\n    position: relative;\r\n    margin: 22px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        margin: 24px 0;\r\n    }\r\n`;\r\nexport const Label = styled.label`\r\n    position: absolute;\r\n    bottom: 2px;\r\n    font-size: ${({ theme }) => theme.fontSizes.XL};\r\n    z-index: 0;\r\n    transition: bottom 0.3s, font-size 0.3s;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    }\r\n`;\r\nexport const Input = styled.input`\r\n    padding: 2px 5px;\r\n    background-color: transparent;\r\n    font-size: ${({ theme }) => theme.fontSizes.M};\r\n    color: ${({ theme }) => theme.colors.fontColor};\r\n    border: none;\r\n    border-radius: 0;\r\n    border-bottom: 1px solid white;\r\n    z-index: 1;\r\n    outline: none;\r\n\r\n    &[value]:not([value='']) + label,\r\n    &:focus + label {\r\n        bottom: 26px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n        color: ${({ theme }) => theme.colors.transparentGrayColor};\r\n\r\n        @media ${device.tabletBreakpoint} {\r\n            bottom: 28px;\r\n            ${({ theme }) => theme.fontSizes.M};\r\n        }\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XL};\r\n    }\r\n`;\r\nexport const Error = styled.p<ErrorProps>`\r\n    margin-top: ${({ block }) => (block ? '18px' : 'unset')};\r\n    position: ${({ block }) => (block ? 'relative' : 'absolute')};\r\n    bottom: ${({ block }) => (block ? 'unset' : '-80%')};\r\n    text-align: center;\r\n    width: 100%;\r\n    font-size: ${({ block, theme }) => (block ? theme.fontSizes.M : theme.fontSizes.XS)};\r\n    color: ${({ theme }) => theme.colors.redColor};\r\n`;\r\nexport const ButtonBox = styled.div<ButtonBoxProps>`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: ${({ registerType }) => (registerType ? 'column' : 'row')};\r\n    align-items: ${({ registerType }) => (registerType ? 'center' : 'center')};\r\n    justify-content: ${({ registerType }) => (registerType ? 'unset' : 'space-between')};\r\n`;\r\nexport const Button = styled.button`\r\n    margin-right: 12px;\r\n    padding: 6px 15px;\r\n    height: max-content;\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 4px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 7px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\nexport const Text = styled.a`\r\n    display: block;\r\n    margin-top: 5px;\r\n    padding: 0px 10px;\r\n    font-size: ${({ theme }) => theme.fontSizes.S};\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.M};\r\n    }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    padding: 5px 10px;\r\n    font-size: ${({ theme }) => theme.fontSizes.S};\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.fontColor};\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.M};\r\n    }\r\n`;\r\n\r\nexport const LinkBox = styled.div<LinkBoxProps>`\r\n    display: ${({ loginFormType }) => (loginFormType ? 'flex' : 'block')};\r\n    flex-direction: ${({ loginFormType }) => (loginFormType ? 'column' : 'unset')};\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Message = styled.p`\r\n    font-size: ${({ theme }) => theme.fontSizes.M};\r\n    color: ${({ theme }) => theme.colors.greenColor};\r\n    text-align: center;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'src/hooks/useForm';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport { emialRegex } from 'src/utils/constants';\r\nimport Loader from 'src/components/Loader/Loader';\r\nimport { Card } from 'src/components/Card/styles';\r\nimport useAuthAction from 'src/hooks/useAuthAction';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport AuthTitle from 'src/components/Title/Title';\r\nimport { Message } from './styles';\r\nimport Button from 'src/components/Button/Button';\r\nimport * as S from 'src/pages/Auth/styles';\r\n\r\nconst ResetPassword = () => {\r\n    const {\r\n        ticTacToeState: {\r\n            loading: { componentLoading },\r\n            error,\r\n            errorMessage,\r\n        },\r\n    } = useTicTacToe();\r\n    const useAction = useAuthAction();\r\n    const [message, setMessage] = useState('');\r\n\r\n    const {\r\n        value: email,\r\n        valueHandler: emailHandler,\r\n        isTouchedHanlder: isTouchedEmailHanlder,\r\n        isValid: isValidEmail,\r\n        error: emailError,\r\n    } = useForm(value => emialRegex.test(value));\r\n\r\n    const submitHandler = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        isTouchedEmailHanlder();\r\n        setMessage('');\r\n\r\n        if (!isValidEmail) return;\r\n\r\n        await useAction(AuthActions.RESET_PASSWORD, 'Failed to reset password', undefined, email);\r\n\r\n        setMessage('Check your inbox for further instructions');\r\n    };\r\n\r\n    const emailErrorInfo = emailError && <S.Error>Please enter a valid Email!</S.Error>;\r\n    return (\r\n        <Card>\r\n            <S.FormBox onSubmit={submitHandler}>\r\n                <AuthTitle>password reset</AuthTitle>\r\n                <S.InputBox>\r\n                    <S.Input\r\n                        onBlur={isTouchedEmailHanlder}\r\n                        onChange={emailHandler}\r\n                        value={email}\r\n                        type=\"email\"\r\n                    />\r\n                    <S.Label>E-mail</S.Label>\r\n                    {emailErrorInfo}\r\n                </S.InputBox>\r\n\r\n                {error && <S.Error block>{errorMessage}</S.Error>}\r\n                {!error && message.length > 0 && <Message>{message}</Message>}\r\n                {componentLoading ? (\r\n                    <Loader />\r\n                ) : (\r\n                    <S.ButtonBox registerType={false}>\r\n                        <Button margin=\"0\" type=\"submit\" width=\"max-content\">\r\n                            reset\r\n                        </Button>\r\n                        <S.StyledLink to=\"/auth\">Back to login</S.StyledLink>\r\n                    </S.ButtonBox>\r\n                )}\r\n            </S.FormBox>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const StyledBtn = styled.button<ButtonsProps>`\r\n    padding: 10px 15px;\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 12px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { StyledBtn } from './styles';\r\n\r\ninterface ButtonProps {\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, width, margin, onClick, type }) => (\r\n    <>\r\n        <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n            {children}\r\n        </StyledBtn>\r\n    </>\r\n);\r\n\r\nexport default Button;\r\n","import { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\n\r\nexport const Card = styled(motion.div)<any>`\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: ${({ theme }) => theme.colors.lightGrayColor};\r\n    border-radius: 4px;\r\n    box-shadow: 3px 3px 14px black;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { device } from 'src/utils/constants';\r\n\r\nexport const Title = styled.h2`\r\n    margin: 20px 0;\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraSLarge};\r\n    text-align: center;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Title: React.FC = ({ children }) => <S.Title>{children}</S.Title>;\r\n\r\nexport default Title;\r\n","export type ProviderValue = {\r\n    currentUser: any;\r\n    signup: (email: string, password: string) => any;\r\n    login: (email: string, password: string) => any;\r\n    logout: () => any;\r\n    resetPassword: (emial: string) => any;\r\n};\r\n\r\nexport enum AuthActions {\r\n    LOGIN = 'LOGIN',\r\n    SIGNUP = 'SIGNUP',\r\n    LOGOUT = 'LOGOUT',\r\n    RESET_PASSWORD = 'RESET_PASSWORD',\r\n}\r\n","import { useHistory } from 'react-router';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useAuth } from './useAuth';\r\nimport { useTicTacToe } from './useTicTacToe';\r\n\r\nconst useAuthAction = () => {\r\n    const { ticTacToeDispatch } = useTicTacToe();\r\n    const { login, signup, logout, resetPassword } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const useAction = async (\r\n        action: AuthActions,\r\n        errorMess: string,\r\n        path?: string,\r\n        email?: string,\r\n        password?: string\r\n    ) => {\r\n        try {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: true },\r\n            });\r\n\r\n            switch (action) {\r\n                case AuthActions.LOGIN:\r\n                    await login(email!, password!);\r\n                    break;\r\n                case AuthActions.SIGNUP:\r\n                    await signup(email!, password!);\r\n                    break;\r\n                case AuthActions.LOGOUT:\r\n                    await logout();\r\n                    break;\r\n                case AuthActions.RESET_PASSWORD:\r\n                    await resetPassword(email!);\r\n                    break;\r\n            }\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: false, errorMessage: '' },\r\n            });\r\n            if (path) history.push(`${path}`);\r\n        } catch (err) {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: true, errorMessage: errorMess },\r\n            });\r\n        } finally {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: false },\r\n            });\r\n        }\r\n    };\r\n    return useAction;\r\n};\r\n\r\nexport default useAuthAction;\r\n","import React, { useState } from 'react';\r\n\r\nexport const useForm = (isInputValid: (value: string) => boolean) => {\r\n    const [value, setValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueHandler = ({ target }: React.ChangeEvent<HTMLInputElement>) => setValue(target.value);\r\n    const isTouchedHanlder = () => setIsTouched(true);\r\n\r\n    let isValid = isInputValid(value);\r\n    const error = isTouched && !isValid;\r\n\r\n    return {\r\n        value,\r\n        valueHandler,\r\n        isTouchedHanlder,\r\n        error,\r\n        isValid,\r\n    };\r\n};\r\n"],"sourceRoot":""}