{"version":3,"sources":["components/Button/styles.ts","components/Button/Button.tsx","utils/helpers.ts","types/gameModes.types.ts","hooks/useQueryParams.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","components/Board/styles.ts","components/Board/Board.tsx","components/TicTacToe/styles.ts","components/TicTacToe/TicTacToe.tsx","components/GameModal/styles.ts","components/GameModal/GameModal.tsx","components/TurnNavigator/styles.ts","components/TurnNavigator/TurnNavigator.tsx","pages/TicTacToe1vs1/styles.ts","pages/TicTacToe1vs1/TicTacToe1vs1.tsx"],"names":["StyledBtn","styled","button","margin","width","theme","fontSizes","XS","colors","whiteColor","transparentBlackColor","blackColor","device","tabletBreakpoint","S","Button","children","onClick","type","calculateWinner","cells","lines","i","length","a","b","c","clickHandler","index","winner","gameMode","xIsNext","x0","GameMode","vsAi","cellsCopy","useQuery","URLSearchParams","useLocation","search","Cell","value","Board","div","map","cell","BoardBox","O","h2","XXL","h3","ExtraLarge","Xor0","transparentGrayColor","ButtonsBox","mobileBreakpoint","TicTacToe","resetGameHandler","componentLoading","useTicTacToe","ticTacToeState","loading","history","useHistory","Loader","path","push","BackDrop","ModalWrapper","Header","GameModal","modalHandler","firstGameModeHeader","vsAIModeHeader","Info","InfoText","X","TurnNavigator","movesLeft","Container","TicTacToe1vs1","useState","Array","fill","setCells","setXIsNext","setMovesLeft","modalVisibility","setModalVisibility","query","get","moveHandler","prevState","show","useEffect"],"mappings":"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","file":"static/js/5.e09c8755.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const StyledBtn = styled.button<ButtonsProps>`\r\n    padding: 10px 15px;\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 12px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { StyledBtn } from './styles';\r\n\r\ninterface ButtonProps {\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, width, margin, onClick, type }) => (\r\n    <>\r\n        <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n            {children}\r\n        </StyledBtn>\r\n    </>\r\n);\r\n\r\nexport default Button;\r\n","import { GameMode } from 'src/types/gameModes.types';\r\n\r\nexport const calculateWinner = (cells: string[]) => {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n            return cells[a];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const clickHandler = (\r\n    index: number,\r\n    winner: any,\r\n    cells: string[],\r\n    gameMode: string,\r\n    xIsNext: boolean,\r\n    x0: string\r\n) => {\r\n    if (winner || cells![index] || (!xIsNext && gameMode === GameMode.vsAi)) return;\r\n\r\n    const cellsCopy = [...cells!];\r\n\r\n    cellsCopy[index] = x0;\r\n    return cellsCopy;\r\n};\r\n","export enum GameMode {\r\n    '1vs1' = '1vs1',\r\n    vsAi = 'vsAI',\r\n}\r\n","import { useLocation } from 'react-router';\r\n\r\nexport const useQuery = () => new URLSearchParams(useLocation().search);\r\n","import styled from 'styled-components';\r\n\r\ninterface CellProps {\r\n    value?: string;\r\n}\r\n\r\nexport const Cell = styled.button<CellProps>`\r\n    width: calc(100% + 1px);\r\n    height: calc(100% + 1px);\r\n    background: #333;\r\n    border: none;\r\n    font-size: 50px;\r\n    color: ${({ value }) => (value === 'X' ? 'red' : 'green')};\r\n    outline: none;\r\n    cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\ninterface CellProps {\r\n    value: string;\r\n    onClick: () => void;\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = ({ value, onClick }) => (\r\n    <S.Cell value={value} onClick={onClick}>\r\n        {value}\r\n    </S.Cell>\r\n);\r\n\r\nexport default Cell;\r\n","import { device } from 'src/utils/constants';\r\nimport styled from 'styled-components';\r\n\r\nexport const Board = styled.div`\r\n    display: grid;\r\n    grid-template: repeat(3, 1fr) / repeat(3, 1fr);\r\n    gap: 8px;\r\n    background: ${({ theme }) => theme.colors.whiteColor};\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 350px;\r\n    max-height: 350px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        max-width: 450px;\r\n        max-height: 450px;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport Cell from 'src/components/Cell/Cell';\r\nimport * as S from './styles';\r\n\r\ninterface BoardProps {\r\n    cells: string[];\r\n    onClick: (index: number) => void;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({ cells, onClick }) => {\r\n    return (\r\n        <S.Board>\r\n            {cells.map((cell: string, index: number) => (\r\n                <Cell key={index} value={cell} onClick={() => onClick(index)} />\r\n            ))}\r\n        </S.Board>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled from 'styled-components';\r\n\r\ninterface Xor0Props {\r\n    Xor0: string;\r\n}\r\n\r\nexport const BoardBox = styled.div`\r\n    margin-top: 40px;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 350px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        margin-top: 60px;\r\n        height: 450px;\r\n    }\r\n`;\r\nexport const Info = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\nexport const InfoText = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    text-transform: uppercase;\r\n`;\r\nexport const O = styled.h3<Xor0Props>`\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? theme.colors.transparentGrayColor : 'green')};\r\n`;\r\nexport const X = styled(O)<Xor0Props>`\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? 'red' : theme.colors.transparentGrayColor)};\r\n`;\r\nexport const ButtonsBox = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    bottom: -60px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n\r\n    @media ${device.mobileBreakpoint} {\r\n        bottom: -110px;\r\n    }\r\n`;\r\n","import { useHistory } from 'react-router';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport Board from '../Board/Board';\r\nimport Button from '../Button/Button';\r\nimport Loader from '../Loader/Loader';\r\nimport * as S from './styles';\r\n\r\ninterface TicTacToeProps {\r\n    cells: string[];\r\n    clickHandler: (index: number) => void;\r\n    resetGameHandler: () => void;\r\n}\r\n\r\nconst TicTacToe: React.FC<TicTacToeProps> = ({ cells, clickHandler, resetGameHandler }) => {\r\n    const {\r\n        ticTacToeState: {\r\n            loading: { componentLoading },\r\n        },\r\n    } = useTicTacToe();\r\n    const history = useHistory();\r\n\r\n    const redirectHandler = (path: string) => history.push(path);\r\n\r\n    return (\r\n        <>\r\n            <S.BoardBox>\r\n                <Board cells={cells!} onClick={clickHandler}></Board>\r\n                <S.ButtonsBox>\r\n                    {componentLoading ? (\r\n                        <Loader />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                onClick={() => redirectHandler('/')}\r\n                                margin=\"0 10px 0 0\"\r\n                                width=\"190px\">\r\n                                back to menu\r\n                            </Button>\r\n                            <Button\r\n                                onClick={resetGameHandler}\r\n                                margin=\"0 0 0 10px\"\r\n                                width=\"max-content\">\r\n                                restart\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </S.ButtonsBox>\r\n            </S.BoardBox>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicTacToe;\r\n","import styled from 'styled-components';\r\n\r\nexport const BackDrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n`;\r\nexport const ModalWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 40%;\r\n    left: 50%;\r\n    width: 100%;\r\n    transform: translate(-50%);\r\n`;\r\nexport const Header = styled.h2`\r\n    font-size: 40px;\r\n    text-transform: uppercase;\r\n`;\r\n","import { GameMode } from 'src/types/gameModes.types';\r\nimport Button from '../Button/Button';\r\nimport * as S from './styles';\r\n\r\ninterface GameModalProps {\r\n    winner: string | null;\r\n    gameMode: string;\r\n    modalHandler: (show: boolean) => void;\r\n}\r\n\r\nconst GameModal: React.FC<GameModalProps> = ({ children, winner, gameMode, modalHandler }) => {\r\n    const firstGameModeHeader = <S.Header>{!!winner ? `\"${winner}\" won` : 'draw'}</S.Header>;\r\n    const vsAIModeHeader = !winner ? (\r\n        <S.Header>draw</S.Header>\r\n    ) : (\r\n        <S.Header>{winner === 'X' ? `you won` : 'you lose'}</S.Header>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <S.BackDrop onClick={() => modalHandler(false)} />\r\n            <S.ModalWrapper>\r\n                {gameMode === GameMode['1vs1'] ? firstGameModeHeader : vsAIModeHeader}\r\n                {children}\r\n                <Button onClick={() => modalHandler(false)} margin=\"28px 0\" width=\"max-content\">\r\n                    close\r\n                </Button>\r\n            </S.ModalWrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GameModal;\r\n","import styled from 'styled-components';\r\n\r\ninterface Xor0Props {\r\n    Xor0: string;\r\n}\r\n\r\nexport const Info = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\nexport const InfoText = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    text-transform: uppercase;\r\n`;\r\nexport const O = styled.h3<Xor0Props>`\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? theme.colors.transparentGrayColor : 'green')};\r\n`;\r\nexport const X = styled(O)<Xor0Props>`\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? 'red' : theme.colors.transparentGrayColor)};\r\n`;\r\n","import * as S from './styles';\r\n\r\ninterface TurnNavigatorProps {\r\n    winner: string | null;\r\n    x0: string;\r\n    movesLeft: number;\r\n}\r\n\r\nconst TurnNavigator: React.FC<TurnNavigatorProps> = ({ winner, x0, movesLeft }) => {\r\n    return (\r\n        <S.Info>\r\n            <S.X Xor0={!!winner ? winner : x0}>X</S.X>\r\n            {!!movesLeft && !winner && <S.InfoText>next move</S.InfoText>}\r\n            <S.O Xor0={!!winner ? winner : x0}>0</S.O>\r\n        </S.Info>\r\n    );\r\n};\r\n\r\nexport default TurnNavigator;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n`;","import { useEffect, useState } from 'react';\r\nimport { useQuery } from 'src/hooks/useQueryParams';\r\nimport { calculateWinner } from 'src/utils/helpers';\r\nimport { clickHandler } from 'src/utils/helpers';\r\nimport TicTacToe from 'src/components/TicTacToe/TicTacToe';\r\nimport GameModal from 'src/components/GameModal/GameModal';\r\nimport TurnNavigator from 'src/components/TurnNavigator/TurnNavigator';\r\nimport * as S from './styles';\r\n\r\nconst TicTacToe1vs1 = () => {\r\n    const [cells, setCells] = useState<string[]>(Array(9).fill(null));\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [movesLeft, setMovesLeft] = useState(9);\r\n    const [modalVisibility, setModalVisibility] = useState(false);\r\n    const query = useQuery();\r\n\r\n    const winner = calculateWinner(cells);\r\n    const x0 = xIsNext ? 'X' : 'O';\r\n    const gameMode = query.get('name')!;\r\n\r\n    const click = (index: number) => {\r\n        const cellsCopy = clickHandler(index, winner, cells, gameMode!, xIsNext, x0);\r\n        if (!!cellsCopy) moveHandler(cellsCopy!);\r\n    };\r\n\r\n    const moveHandler = (cellsCopy: string[]) => {\r\n        setCells([...cellsCopy]);\r\n        setXIsNext(!xIsNext);\r\n        setMovesLeft(prevState => prevState - 1);\r\n    };\r\n\r\n    const resetGameHandler = () => {\r\n        setCells(Array(9).fill(null));\r\n        setXIsNext(true);\r\n        setMovesLeft(9);\r\n    };\r\n\r\n    const modalHandler = (show: boolean) => setModalVisibility(show);\r\n\r\n    useEffect(() => {\r\n        if (!!winner || !movesLeft) modalHandler(true);\r\n    }, [movesLeft]);\r\n\r\n    return (\r\n        <S.Container>\r\n            <TurnNavigator winner={winner} x0={x0} movesLeft={movesLeft} />\r\n            <TicTacToe cells={cells} clickHandler={click} resetGameHandler={resetGameHandler} />\r\n            {modalVisibility && (\r\n                <GameModal winner={winner} gameMode={gameMode} modalHandler={modalHandler} />\r\n            )}\r\n        </S.Container>\r\n    );\r\n};\r\n\r\nexport default TicTacToe1vs1;\r\n"],"sourceRoot":""}