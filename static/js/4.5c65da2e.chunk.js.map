{"version":3,"sources":["components/Button/styles.ts","components/Button/Button.tsx","components/Card/styles.ts","components/Title/styles.ts","components/Title/Title.tsx","store/Auth/Auth.types.ts","hooks/useAuthAction.ts","hooks/useForm.ts","pages/Auth/styles.ts","pages/ResetPassword/styles.ts","pages/ResetPassword/ResetPassword.tsx"],"names":["StyledBtn","styled","button","margin","width","theme","fontSizes","XS","colors","whiteColor","transparentBlackColor","blackColor","device","tabletBreakpoint","S","Button","children","onClick","type","Card","div","lightGrayColor","Title","h2","ExtraSLarge","ExtraLarge","AuthActions","useAuthAction","ticTacToeDispatch","useTicTacToe","useAuth","login","signup","logout","resetPassword","history","useHistory","useAction","action","errorMess","path","email","password","a","TicTacToeActionType","LOADING","payload","componentLoading","LOGIN","SIGNUP","LOGOUT","RESET_PASSWORD","ERROR","error","errorMessage","push","useForm","isInputValid","useState","value","setValue","isTouched","setIsTouched","isValid","valueHandler","target","isTouchedHanlder","FormBox","form","InputBox","Label","label","XL","XXL","Input","input","M","fontColor","transparentGrayColor","Error","p","block","redColor","ButtonBox","registerType","Text","StyledLink","Link","LinkBox","loginFormType","Message","greenColor","ResetPassword","ticTacToeState","loading","message","setMessage","emialRegex","test","emailHandler","isTouchedEmailHanlder","isValidEmail","emailError","submitHandler","event","preventDefault","undefined","emailErrorInfo","onSubmit","onBlur","onChange","length","Loader","to"],"mappings":"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","file":"static/js/4.5c65da2e.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const StyledBtn = styled.button<ButtonsProps>`\r\n    padding: 10px 15px;\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 12px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { StyledBtn } from './styles';\r\n\r\ninterface ButtonProps {\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, width, margin, onClick, type }) => (\r\n    <>\r\n        <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n            {children}\r\n        </StyledBtn>\r\n    </>\r\n);\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: ${({ theme }) => theme.colors.lightGrayColor};\r\n    border-radius: 4px;\r\n    box-shadow: 3px 3px 14px black;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { device } from 'src/utils/constants';\r\n\r\nexport const Title = styled.h2`\r\n    margin: 20px 0;\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraSLarge};\r\n    text-align: center;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Title: React.FC = ({ children }) => <S.Title>{children}</S.Title>;\r\n\r\nexport default Title;\r\n","export type ProviderValue = {\r\n    currentUser: any;\r\n    signup: (email: string, password: string) => any;\r\n    login: (email: string, password: string) => any;\r\n    logout: () => any;\r\n    resetPassword: (emial: string) => any;\r\n};\r\n\r\nexport enum AuthActions {\r\n    LOGIN = 'LOGIN',\r\n    SIGNUP = 'SIGNUP',\r\n    LOGOUT = 'LOGOUT',\r\n    RESET_PASSWORD = 'RESET_PASSWORD',\r\n}\r\n","import { useHistory } from 'react-router';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useAuth } from './useAuth';\r\nimport { useTicTacToe } from './useTicTacToe';\r\n\r\nconst useAuthAction = () => {\r\n    const { ticTacToeDispatch } = useTicTacToe();\r\n    const { login, signup, logout, resetPassword } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const useAction = async (\r\n        action: AuthActions,\r\n        errorMess: string,\r\n        path?: string,\r\n        email?: string,\r\n        password?: string\r\n    ) => {\r\n        try {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: true },\r\n            });\r\n\r\n            switch (action) {\r\n                case AuthActions.LOGIN:\r\n                    await login(email!, password!);\r\n                    break;\r\n                case AuthActions.SIGNUP:\r\n                    await signup(email!, password!);\r\n                    break;\r\n                case AuthActions.LOGOUT:\r\n                    await logout();\r\n                    break;\r\n                case AuthActions.RESET_PASSWORD:\r\n                    await resetPassword(email!);\r\n                    break;\r\n            }\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: false, errorMessage: '' },\r\n            });\r\n            if (path) history.push(`${path}`);\r\n        } catch (err) {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: true, errorMessage: errorMess },\r\n            });\r\n        } finally {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: false },\r\n            });\r\n        }\r\n    };\r\n    return useAction;\r\n};\r\n\r\nexport default useAuthAction;\r\n","import React, { useState } from 'react';\r\n\r\nexport const useForm = (isInputValid: (value: string) => boolean) => {\r\n    const [value, setValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueHandler = ({ target }: React.ChangeEvent<HTMLInputElement>) => setValue(target.value);\r\n    const isTouchedHanlder = () => setIsTouched(true);\r\n\r\n    let isValid = isInputValid(value);\r\n    const error = isTouched && !isValid;\r\n\r\n    return {\r\n        value,\r\n        valueHandler,\r\n        isTouchedHanlder,\r\n        error,\r\n        isValid,\r\n    };\r\n};\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\n\r\ninterface ButtonBoxProps {\r\n    registerType: boolean;\r\n}\r\ninterface ErrorProps {\r\n    block?: boolean;\r\n}\r\ninterface LinkBoxProps {\r\n    loginFormType: boolean;\r\n}\r\n\r\nexport const FormBox = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    max-width: 400px;\r\n`;\r\nexport const InputBox = styled.div`\r\n    position: relative;\r\n    margin: 22px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        margin: 24px 0;\r\n    }\r\n`;\r\nexport const Label = styled.label`\r\n    position: absolute;\r\n    bottom: 2px;\r\n    font-size: ${({ theme }) => theme.fontSizes.XL};\r\n    z-index: 0;\r\n    transition: bottom 0.3s, font-size 0.3s;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    }\r\n`;\r\nexport const Input = styled.input`\r\n    padding: 2px 5px;\r\n    background-color: transparent;\r\n    font-size: ${({ theme }) => theme.fontSizes.M};\r\n    color: ${({ theme }) => theme.colors.fontColor};\r\n    border: none;\r\n    border-radius: 0;\r\n    border-bottom: 1px solid white;\r\n    z-index: 1;\r\n    outline: none;\r\n\r\n    &[value]:not([value='']) + label,\r\n    &:focus + label {\r\n        bottom: 26px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n        color: ${({ theme }) => theme.colors.transparentGrayColor};\r\n\r\n        @media ${device.tabletBreakpoint} {\r\n            bottom: 28px;\r\n            ${({ theme }) => theme.fontSizes.M};\r\n        }\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.XL};\r\n    }\r\n`;\r\nexport const Error = styled.p<ErrorProps>`\r\n    margin-top: ${({ block }) => (block ? '18px' : 'unset')};\r\n    position: ${({ block }) => (block ? 'relative' : 'absolute')};\r\n    bottom: ${({ block }) => (block ? 'unset' : '-80%')};\r\n    text-align: center;\r\n    width: 100%;\r\n    font-size: ${({ block, theme }) => (block ? theme.fontSizes.M : theme.fontSizes.XS)};\r\n    color: ${({ theme }) => theme.colors.redColor};\r\n`;\r\nexport const ButtonBox = styled.div<ButtonBoxProps>`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: ${({ registerType }) => (registerType ? 'column' : 'row')};\r\n    align-items: ${({ registerType }) => (registerType ? 'center' : 'center')};\r\n    justify-content: ${({ registerType }) => (registerType ? 'unset' : 'space-between')};\r\n`;\r\nexport const Button = styled.button`\r\n    margin-right: 12px;\r\n    padding: 6px 15px;\r\n    height: max-content;\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 4px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 7px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\nexport const Text = styled.a`\r\n    display: block;\r\n    margin-top: 5px;\r\n    padding: 0px 10px;\r\n    font-size: ${({ theme }) => theme.fontSizes.S};\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.M};\r\n    }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    padding: 5px 10px;\r\n    font-size: ${({ theme }) => theme.fontSizes.S};\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.fontColor};\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.M};\r\n    }\r\n`;\r\n\r\nexport const LinkBox = styled.div<LinkBoxProps>`\r\n    display: ${({ loginFormType }) => (loginFormType ? 'flex' : 'block')};\r\n    flex-direction: ${({ loginFormType }) => (loginFormType ? 'column' : 'unset')};\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Message = styled.p`\r\n    font-size: ${({ theme }) => theme.fontSizes.M};\r\n    color: ${({ theme }) => theme.colors.greenColor};\r\n    text-align: center;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'src/hooks/useForm';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport { emialRegex } from 'src/utils/constants';\r\nimport Loader from 'src/components/Loader/Loader';\r\nimport { Card } from 'src/components/Card/styles';\r\nimport useAuthAction from 'src/hooks/useAuthAction';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport AuthTitle from 'src/components/Title/Title';\r\nimport { Message } from './styles';\r\nimport Button from 'src/components/Button/Button';\r\nimport * as S from 'src/pages/Auth/styles';\r\n\r\nconst ResetPassword = () => {\r\n    const {\r\n        ticTacToeState: {\r\n            loading: { componentLoading },\r\n            error,\r\n            errorMessage,\r\n        },\r\n    } = useTicTacToe();\r\n    const useAction = useAuthAction();\r\n    const [message, setMessage] = useState('');\r\n\r\n    const {\r\n        value: email,\r\n        valueHandler: emailHandler,\r\n        isTouchedHanlder: isTouchedEmailHanlder,\r\n        isValid: isValidEmail,\r\n        error: emailError,\r\n    } = useForm(value => emialRegex.test(value));\r\n\r\n    const submitHandler = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        isTouchedEmailHanlder();\r\n        setMessage('');\r\n\r\n        if (!isValidEmail) return;\r\n\r\n        await useAction(AuthActions.RESET_PASSWORD, 'Failed to reset password', undefined, email);\r\n\r\n        setMessage('Check your inbox for further instructions');\r\n    };\r\n\r\n    const emailErrorInfo = emailError && <S.Error>Please enter a valid Email!</S.Error>;\r\n    return (\r\n        <Card>\r\n            <S.FormBox onSubmit={submitHandler}>\r\n                <AuthTitle>password reset</AuthTitle>\r\n                <S.InputBox>\r\n                    <S.Input\r\n                        onBlur={isTouchedEmailHanlder}\r\n                        onChange={emailHandler}\r\n                        value={email}\r\n                        type=\"email\"\r\n                    />\r\n                    <S.Label>E-mail</S.Label>\r\n                    {emailErrorInfo}\r\n                </S.InputBox>\r\n\r\n                {error && <S.Error block>{errorMessage}</S.Error>}\r\n                {!error && message.length > 0 && <Message>{message}</Message>}\r\n                {componentLoading ? (\r\n                    <Loader />\r\n                ) : (\r\n                    <S.ButtonBox registerType={false}>\r\n                        <Button margin=\"0\" type=\"submit\" width=\"max-content\">\r\n                            reset\r\n                        </Button>\r\n                        <S.StyledLink to=\"/auth\">Back to login</S.StyledLink>\r\n                    </S.ButtonBox>\r\n                )}\r\n            </S.FormBox>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}