{"version":3,"sources":["components/Button/styles.ts","components/Button/Button.tsx","store/Auth/Auth.types.ts","components/Card/styles.ts","components/Title/styles.ts","components/Title/Title.tsx","hooks/useAuthAction.ts","components/Card/Card.tsx","pages/Menu/styles.ts","pages/Menu/Menu.tsx"],"names":["StyledBtn","styled","button","margin","width","theme","fontSizes","XS","colors","whiteColor","transparentBlackColor","blackColor","device","tabletBreakpoint","S","Button","children","onClick","type","AuthActions","Card","div","lightGrayColor","Title","h2","ExtraSLarge","ExtraLarge","useAuthAction","ticTacToeDispatch","useTicTacToe","useAuth","login","signup","logout","resetPassword","history","useHistory","useAction","action","errorMess","path","email","password","a","TicTacToeActionType","LOADING","payload","componentLoading","LOGIN","SIGNUP","LOGOUT","RESET_PASSWORD","ERROR","error","errorMessage","push","MenuBox","ButtonsBox","transparentGrayColor","redColor","Menu","logoutHandling","redirectHandler"],"mappings":"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","file":"static/js/7.ea972db6.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const StyledBtn = styled.button<ButtonsProps>`\r\n    padding: 10px 15px;\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 12px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { StyledBtn } from './styles';\r\n\r\ninterface ButtonProps {\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, width, margin, onClick, type }) => (\r\n    <>\r\n        <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n            {children}\r\n        </StyledBtn>\r\n    </>\r\n);\r\n\r\nexport default Button;\r\n","export type ProviderValue = {\r\n    currentUser: any;\r\n    signup: (email: string, password: string) => any;\r\n    login: (email: string, password: string) => any;\r\n    logout: () => any;\r\n    resetPassword: (emial: string) => any;\r\n};\r\n\r\nexport enum AuthActions {\r\n    LOGIN = 'LOGIN',\r\n    SIGNUP = 'SIGNUP',\r\n    LOGOUT = 'LOGOUT',\r\n    RESET_PASSWORD = 'RESET_PASSWORD',\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n    padding: 20px;\r\n    margin-top: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: ${({ theme }) => theme.colors.lightGrayColor};\r\n    border-radius: 4px;\r\n    box-shadow: 3px 3px 14px black;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { device } from 'src/utils/constants';\r\n\r\nexport const Title = styled.h2`\r\n    margin: 20px 0;\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraSLarge};\r\n    text-align: center;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Title: React.FC = ({ children }) => <S.Title>{children}</S.Title>;\r\n\r\nexport default Title;\r\n","import { useHistory } from 'react-router';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useAuth } from './useAuth';\r\nimport { useTicTacToe } from './useTicTacToe';\r\n\r\nconst useAuthAction = () => {\r\n    const { ticTacToeDispatch } = useTicTacToe();\r\n    const { login, signup, logout, resetPassword } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const useAction = async (\r\n        action: AuthActions,\r\n        errorMess: string,\r\n        path?: string,\r\n        email?: string,\r\n        password?: string\r\n    ) => {\r\n        try {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: true },\r\n            });\r\n\r\n            switch (action) {\r\n                case AuthActions.LOGIN:\r\n                    await login(email!, password!);\r\n                    break;\r\n                case AuthActions.SIGNUP:\r\n                    await signup(email!, password!);\r\n                    break;\r\n                case AuthActions.LOGOUT:\r\n                    await logout();\r\n                    break;\r\n                case AuthActions.RESET_PASSWORD:\r\n                    await resetPassword(email!);\r\n                    break;\r\n            }\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: false, errorMessage: '' },\r\n            });\r\n            if (path) history.push(`${path}`);\r\n        } catch (err) {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.ERROR,\r\n                payload: { error: true, errorMessage: errorMess },\r\n            });\r\n        } finally {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: false },\r\n            });\r\n        }\r\n    };\r\n    return useAction;\r\n};\r\n\r\nexport default useAuthAction;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\nconst Card: React.FC = ({ children }) => {\r\n    return <S.Card>{children}</S.Card>;\r\n};\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\nexport const MenuBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\nexport const ButtonsBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 160px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 5px 0;\r\n    margin-top: 26px;\r\n    width: 100%;\r\n    background-color: ${({ theme }) => theme.colors.transparentGrayColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 2px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.redColor};\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n`;\r\n","import { useHistory } from 'react-router';\r\nimport Button from 'src/components/Button/Button';\r\nimport Card from 'src/components/Card/Card';\r\nimport Title from 'src/components/Title/Title';\r\nimport useAuthAction from 'src/hooks/useAuthAction';\r\nimport { AuthActions } from 'src/store/Auth/Auth.types';\r\nimport * as S from './styles';\r\n\r\nconst Menu = () => {\r\n    const useAction = useAuthAction();\r\n    const history = useHistory();\r\n\r\n    const logoutHandling = async () =>\r\n        await useAction(AuthActions.LOGOUT, 'Failed to logout!', '/auth');\r\n\r\n    const redirectHandler = (path: string) => history.push(path);\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <S.MenuBox>\r\n                    <Title>Menu</Title>\r\n                    <S.ButtonsBox>\r\n                        <Button\r\n                            onClick={() => redirectHandler('/ticTacToe/1vs1?name=1vs1')}\r\n                            margin=\"26px 0 0 0\"\r\n                            width=\"100%\">\r\n                            1 vs 1\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => redirectHandler('/ticTacToe/vsAI?name=vsAI')}\r\n                            margin=\"26px 0 0 0\"\r\n                            width=\"100%\">\r\n                            vs ai\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => redirectHandler('/ranking')}\r\n                            margin=\"26px 0 0 0\"\r\n                            width=\"100%\">\r\n                            ranking\r\n                        </Button>\r\n                        <S.Button onClick={logoutHandling}>Logout</S.Button>\r\n                    </S.ButtonsBox>\r\n                </S.MenuBox>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n"],"sourceRoot":""}