{"version":3,"sources":["hooks/useQueryParams.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","components/Board/styles.ts","components/Board/Board.tsx","components/TicTacToe/styles.ts","components/TicTacToe/TicTacToe.tsx","components/GameModal/styles.ts","components/GameModal/GameModal.tsx","components/TurnNavigator/styles.ts","components/TurnNavigator/TurnNavigator.tsx","pages/TicTacToeVsAI/styles.ts","pages/TicTacToeVsAI/TicTacToeVsAI.tsx","components/Button/styles.ts","components/Button/Button.tsx","utils/helpers.ts","types/gameModes.types.ts"],"names":["useQuery","URLSearchParams","useLocation","search","Cell","styled","button","value","onClick","Board","div","theme","colors","whiteColor","device","tabletBreakpoint","cells","map","cell","index","BoardBox","O","h2","fontSizes","XXL","h3","ExtraLarge","Xor0","transparentGrayColor","ButtonsBox","mobileBreakpoint","TicTacToe","clickHandler","resetGameHandler","componentLoading","useTicTacToe","ticTacToeState","loading","history","useHistory","Loader","Button","path","push","margin","width","BackDrop","ModalWrapper","Header","GameModal","children","winner","gameMode","modalHandler","firstGameModeHeader","vsAIModeHeader","GameMode","Info","InfoText","X","TurnNavigator","x0","movesLeft","Container","DescriptionBox","DescTitle","Description","p","TicTacToeVsAI","useState","Array","fill","setCells","xIsNext","setXIsNext","setMovesLeft","modalVisibility","setModalVisibility","currentUser","useAuth","ticTacToeDispatch","userData","query","calculateWinner","get","moveHandler","cellsCopy","prevState","updateUserData","a","updatedUserData","gamesPlayed","lostGames","wonGames","type","TicTacToeActionType","LOADING","payload","setUserData","email","UPDATE_USER_DATA","alert","message","show","useEffect","aiMoveTimeout","setTimeout","shuffleUnique","randomNumber","Math","floor","random","aiMove","clearTimeout","motion","pageProps","variants","pageVariants","transition","pageTransition","StyledBtn","XS","transparentBlackColor","blackColor","S","lines","i","length","b","c","vsAi"],"mappings":"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","file":"static/js/7.a692089c.chunk.js","sourcesContent":["import { useLocation } from 'react-router';\r\n\r\nexport const useQuery = () => new URLSearchParams(useLocation().search);\r\n","import styled from 'styled-components';\r\n\r\ninterface CellProps {\r\n    value?: string;\r\n}\r\n\r\nexport const Cell = styled.button<CellProps>`\r\n    width: calc(100% + 1px);\r\n    height: calc(100% + 1px);\r\n    background: #333;\r\n    border: none;\r\n    font-size: 50px;\r\n    color: ${({ value }) => (value === 'X' ? 'red' : 'green')};\r\n    outline: none;\r\n    cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport * as S from './styles';\r\n\r\ninterface CellProps {\r\n    value: string;\r\n    onClick: () => void;\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = ({ value, onClick }) => (\r\n    <S.Cell value={value} onClick={onClick}>\r\n        {value}\r\n    </S.Cell>\r\n);\r\n\r\nexport default Cell;\r\n","import { device } from 'src/utils/constants';\r\nimport styled from 'styled-components';\r\n\r\nexport const Board = styled.div`\r\n    display: grid;\r\n    grid-template: repeat(3, 1fr) / repeat(3, 1fr);\r\n    gap: 8px;\r\n    background: ${({ theme }) => theme.colors.whiteColor};\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 350px;\r\n    max-height: 350px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        max-width: 450px;\r\n        max-height: 450px;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport Cell from 'src/components/Cell/Cell';\r\nimport * as S from './styles';\r\n\r\ninterface BoardProps {\r\n    cells: string[];\r\n    onClick: (index: number) => void;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({ cells, onClick }) => {\r\n    return (\r\n        <S.Board>\r\n            {cells.map((cell: string, index: number) => (\r\n                <Cell key={index} value={cell} onClick={() => onClick(index)} />\r\n            ))}\r\n        </S.Board>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled from 'styled-components';\r\n\r\ninterface Xor0Props {\r\n    Xor0: string;\r\n}\r\n\r\nexport const BoardBox = styled.div`\r\n    margin-top: 40px;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 350px;\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        margin-top: 60px;\r\n        height: 450px;\r\n    }\r\n`;\r\nexport const Info = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\nexport const InfoText = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    text-transform: uppercase;\r\n`;\r\nexport const O = styled.h3<Xor0Props>`\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? theme.colors.transparentGrayColor : 'green')};\r\n`;\r\nexport const X = styled(O)<Xor0Props>`\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? 'red' : theme.colors.transparentGrayColor)};\r\n`;\r\nexport const ButtonsBox = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    bottom: -60px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n\r\n    @media ${device.mobileBreakpoint} {\r\n        bottom: -110px;\r\n    }\r\n`;\r\n","import { useHistory } from 'react-router';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport Board from '../Board/Board';\r\nimport Button from '../Button/Button';\r\nimport Loader from '../Loader/Loader';\r\nimport * as S from './styles';\r\n\r\ninterface TicTacToeProps {\r\n    cells: string[];\r\n    clickHandler: (index: number) => void;\r\n    resetGameHandler: () => void;\r\n}\r\n\r\nconst TicTacToe: React.FC<TicTacToeProps> = ({ cells, clickHandler, resetGameHandler }) => {\r\n    const {\r\n        ticTacToeState: {\r\n            loading: { componentLoading },\r\n        },\r\n    } = useTicTacToe();\r\n    const history = useHistory();\r\n\r\n    const redirectHandler = (path: string) => history.push(path);\r\n\r\n    return (\r\n        <>\r\n            <S.BoardBox>\r\n                <Board cells={cells!} onClick={clickHandler}></Board>\r\n                <S.ButtonsBox>\r\n                    {componentLoading ? (\r\n                        <Loader />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                onClick={() => redirectHandler('/')}\r\n                                margin=\"0 10px 0 0\"\r\n                                width=\"190px\">\r\n                                back to menu\r\n                            </Button>\r\n                            <Button\r\n                                onClick={resetGameHandler}\r\n                                margin=\"0 0 0 10px\"\r\n                                width=\"max-content\">\r\n                                restart\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </S.ButtonsBox>\r\n            </S.BoardBox>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicTacToe;\r\n","import styled from 'styled-components';\r\n\r\nexport const BackDrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n`;\r\nexport const ModalWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 40%;\r\n    left: 50%;\r\n    width: 100%;\r\n    transform: translate(-50%);\r\n`;\r\nexport const Header = styled.h2`\r\n    font-size: 40px;\r\n    text-transform: uppercase;\r\n`;\r\n","import { GameMode } from 'src/types/gameModes.types';\r\nimport Button from '../Button/Button';\r\nimport * as S from './styles';\r\n\r\ninterface GameModalProps {\r\n    winner: string | null;\r\n    gameMode: string;\r\n    modalHandler: (show: boolean) => void;\r\n}\r\n\r\nconst GameModal: React.FC<GameModalProps> = ({ children, winner, gameMode, modalHandler }) => {\r\n    const firstGameModeHeader = <S.Header>{!!winner ? `\"${winner}\" won` : 'draw'}</S.Header>;\r\n    const vsAIModeHeader = !winner ? (\r\n        <S.Header>draw</S.Header>\r\n    ) : (\r\n        <S.Header>{winner === 'X' ? `you won` : 'you lose'}</S.Header>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <S.BackDrop onClick={() => modalHandler(false)} />\r\n            <S.ModalWrapper>\r\n                {gameMode === GameMode['1vs1'] ? firstGameModeHeader : vsAIModeHeader}\r\n                {children}\r\n                <Button onClick={() => modalHandler(false)} margin=\"28px 0\" width=\"max-content\">\r\n                    close\r\n                </Button>\r\n            </S.ModalWrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GameModal;\r\n","import styled from 'styled-components';\r\n\r\ninterface Xor0Props {\r\n    Xor0: string;\r\n}\r\n\r\nexport const Info = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\nexport const InfoText = styled.h2`\r\n    font-size: ${({ theme }) => theme.fontSizes.XXL};\r\n    text-transform: uppercase;\r\n`;\r\nexport const O = styled.h3<Xor0Props>`\r\n    font-size: ${({ theme }) => theme.fontSizes.ExtraLarge};\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? theme.colors.transparentGrayColor : 'green')};\r\n`;\r\nexport const X = styled(O)<Xor0Props>`\r\n    color: ${({ Xor0, theme }) => (Xor0 === 'X' ? 'red' : theme.colors.transparentGrayColor)};\r\n`;\r\n","import * as S from './styles';\r\n\r\ninterface TurnNavigatorProps {\r\n    winner: string | null;\r\n    x0: string;\r\n    movesLeft: number;\r\n}\r\n\r\nconst TurnNavigator: React.FC<TurnNavigatorProps> = ({ winner, x0, movesLeft }) => {\r\n    return (\r\n        <S.Info>\r\n            <S.X Xor0={!!winner ? winner : x0}>X</S.X>\r\n            {!!movesLeft && !winner && <S.InfoText>next move</S.InfoText>}\r\n            <S.O Xor0={!!winner ? winner : x0}>0</S.O>\r\n        </S.Info>\r\n    );\r\n};\r\n\r\nexport default TurnNavigator;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n`;\r\nexport const DescriptionBox = styled.div`\r\n    margin: 10px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\nexport const DescTitle = styled.h3`\r\n    text-transform: uppercase;\r\n`;\r\nexport const Description = styled.p`\r\n    margin-top: 8px;\r\n    text-transform: uppercase;\r\n`;\r\n","import { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { useQuery } from 'src/hooks/useQueryParams';\r\nimport { calculateWinner } from 'src/utils/helpers';\r\nimport { clickHandler } from 'src/utils/helpers';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport TicTacToe from 'src/components/TicTacToe/TicTacToe';\r\nimport GameModal from 'src/components/GameModal/GameModal';\r\nimport TurnNavigator from 'src/components/TurnNavigator/TurnNavigator';\r\nimport { setUserData } from 'src/store/TicTacToe/TicTacToe.services';\r\nimport { TicTacToeActionType } from 'src/store/TicTacToe/TicTacToe.types';\r\nimport { useTicTacToe } from 'src/hooks/useTicTacToe';\r\nimport { pageProps, pageTransition, pageVariants } from 'src/utils/constants';\r\nimport * as S from './styles';\r\n\r\nconst TicTacToeVsAI = () => {\r\n    const [cells, setCells] = useState<string[]>(Array(9).fill(null));\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [movesLeft, setMovesLeft] = useState(9);\r\n    const [modalVisibility, setModalVisibility] = useState(false);\r\n    const { currentUser } = useAuth();\r\n    const {\r\n        ticTacToeDispatch,\r\n        ticTacToeState: { userData },\r\n    } = useTicTacToe();\r\n    const query = useQuery();\r\n\r\n    const winner = calculateWinner(cells);\r\n    const x0 = xIsNext ? 'X' : 'O';\r\n    const gameMode = query.get('name')!;\r\n\r\n    const click = (index: number) => {\r\n        const cellsCopy = clickHandler(index, winner, cells, gameMode!, xIsNext, x0);\r\n        if (!!cellsCopy) moveHandler(cellsCopy!);\r\n    };\r\n\r\n    const aiMove = () => {\r\n        if (!xIsNext && !winner && movesLeft !== 0) {\r\n            const cellsCopy = [...cells!];\r\n            let shuffleUnique = true;\r\n\r\n            while (shuffleUnique) {\r\n                let randomNumber = Math.floor(Math.random() * 9);\r\n\r\n                if (!cells![randomNumber]) {\r\n                    shuffleUnique = false;\r\n                    cellsCopy[randomNumber] = x0;\r\n                }\r\n            }\r\n            moveHandler(cellsCopy);\r\n        }\r\n    };\r\n\r\n    const moveHandler = (cellsCopy: string[]) => {\r\n        setCells([...cellsCopy]);\r\n        setXIsNext(!xIsNext);\r\n        setMovesLeft(prevState => prevState - 1);\r\n    };\r\n\r\n    const resetGameHandler = () => {\r\n        setCells(Array(9).fill(null));\r\n        setXIsNext(true);\r\n        setMovesLeft(9);\r\n    };\r\n\r\n    const updateUserData = async () => {\r\n        const updatedUserData = {\r\n            gamesPlayed: +userData.gamesPlayed + 1,\r\n            lostGames: +userData.lostGames,\r\n            wonGames: +userData.wonGames,\r\n        };\r\n\r\n        if (winner === 'O') updatedUserData.lostGames = +userData.lostGames + 1;\r\n        if (winner === 'X') updatedUserData.wonGames = +userData.wonGames + 1;\r\n\r\n        try {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: true },\r\n            });\r\n\r\n            await setUserData(currentUser.email, updatedUserData);\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.UPDATE_USER_DATA,\r\n                payload: updatedUserData,\r\n            });\r\n            modalHandler(true);\r\n        } catch (err: any) {\r\n            alert(err.message);\r\n        } finally {\r\n            ticTacToeDispatch({\r\n                type: TicTacToeActionType.LOADING,\r\n                payload: { componentLoading: false },\r\n            });\r\n        }\r\n    };\r\n\r\n    const modalHandler = (show: boolean) => setModalVisibility(show);\r\n\r\n    useEffect(() => {\r\n        if (!!winner || !movesLeft) updateUserData();\r\n    }, [movesLeft]);\r\n\r\n    useEffect(() => {\r\n        const aiMoveTimeout = setTimeout(() => aiMove(), 500);\r\n\r\n        return () => clearTimeout(aiMoveTimeout);\r\n    }, [movesLeft]);\r\n\r\n    return (\r\n        <motion.div {...pageProps} variants={pageVariants} transition={pageTransition}>\r\n            <S.Container>\r\n                <TurnNavigator winner={winner} x0={x0} movesLeft={movesLeft} />\r\n                <TicTacToe cells={cells} clickHandler={click} resetGameHandler={resetGameHandler} />\r\n                {modalVisibility && (\r\n                    <GameModal winner={winner} gameMode={gameMode} modalHandler={modalHandler}>\r\n                        <S.DescriptionBox>\r\n                            <S.DescTitle>games played: {userData.gamesPlayed}</S.DescTitle>\r\n                            <S.Description>lost games: {userData.lostGames}</S.Description>\r\n                            <S.Description>won games: {userData.wonGames}</S.Description>\r\n                        </S.DescriptionBox>\r\n                    </GameModal>\r\n                )}\r\n            </S.Container>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default TicTacToeVsAI;\r\n","import { Link } from 'react-router-dom';\r\nimport { device } from 'src/utils/constants';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonsProps {\r\n    width: string;\r\n    margin: string;\r\n}\r\n\r\nexport const StyledBtn = styled.button<ButtonsProps>`\r\n    padding: 10px 15px;\r\n    margin: ${({ margin }) => margin};\r\n    width: ${({ width }) => width};\r\n    font-size: ${({ theme }) => theme.fontSizes.XS};\r\n    background-color: ${({ theme }) => theme.colors.whiteColor};\r\n    color: ${({ theme }) => theme.colors.transparentBlackColor};\r\n    border: 1px solid transparent;\r\n    border-radius: 8px;\r\n    box-shadow: 2px 1px 10px ${({ theme }) => theme.colors.blackColor};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s, color 0.3s, border 0.3s;\r\n\r\n    &:hover {\r\n        background-color: transparent;\r\n        color: white;\r\n        border: 1px solid ${({ theme }) => theme.colors.whiteColor};\r\n    }\r\n\r\n    @media ${device.tabletBreakpoint} {\r\n        padding: 12px 16px;\r\n        font-size: ${({ theme }) => theme.fontSizes.S};\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { StyledBtn } from './styles';\r\n\r\ninterface ButtonProps {\r\n    width: string;\r\n    margin: string;\r\n    onClick?: () => void;\r\n    type?: 'submit' | 'reset' | 'button';\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, width, margin, onClick, type }) => (\r\n    <>\r\n        <StyledBtn onClick={onClick} margin={margin} width={width} type={type!}>\r\n            {children}\r\n        </StyledBtn>\r\n    </>\r\n);\r\n\r\nexport default Button;\r\n","import { GameMode } from 'src/types/gameModes.types';\r\n\r\nexport const calculateWinner = (cells: string[]) => {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n            return cells[a];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const clickHandler = (\r\n    index: number,\r\n    winner: any,\r\n    cells: string[],\r\n    gameMode: string,\r\n    xIsNext: boolean,\r\n    x0: string\r\n) => {\r\n    if (winner || cells![index] || (!xIsNext && gameMode === GameMode.vsAi)) return;\r\n\r\n    const cellsCopy = [...cells!];\r\n\r\n    cellsCopy[index] = x0;\r\n    return cellsCopy;\r\n};\r\n","export enum GameMode {\r\n    '1vs1' = '1vs1',\r\n    vsAi = 'vsAI',\r\n}\r\n"],"sourceRoot":""}